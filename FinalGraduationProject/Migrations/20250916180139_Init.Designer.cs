// <auto-generated />
using System;
using FinalGraduationProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinalGraduationProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250916180139_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FinalGraduationProject.Models.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("FinalGraduationProject.Models.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FinalGraduationProject.Models.Brand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Nike"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Adidas"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Puma"
                        });
                });

            modelBuilder.Entity("FinalGraduationProject.Models.Cart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("FinalGraduationProject.Models.CartItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CartId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("FinalGraduationProject.Models.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Running"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Casual"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Sports"
                        });
                });

            modelBuilder.Entity("FinalGraduationProject.Models.Inventory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("LastStockChangeAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int");

                    b.Property<int>("QuantityReserved")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SafetyStockThreshold")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Inventories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            LastStockChangeAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 1L,
                            QuantityAvailable = 50,
                            QuantityReserved = 0,
                            RowVersion = new byte[0],
                            SafetyStockThreshold = 5
                        },
                        new
                        {
                            Id = 2L,
                            LastStockChangeAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 2L,
                            QuantityAvailable = 50,
                            QuantityReserved = 0,
                            RowVersion = new byte[0],
                            SafetyStockThreshold = 5
                        },
                        new
                        {
                            Id = 3L,
                            LastStockChangeAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 3L,
                            QuantityAvailable = 50,
                            QuantityReserved = 0,
                            RowVersion = new byte[0],
                            SafetyStockThreshold = 5
                        },
                        new
                        {
                            Id = 4L,
                            LastStockChangeAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 4L,
                            QuantityAvailable = 50,
                            QuantityReserved = 0,
                            RowVersion = new byte[0],
                            SafetyStockThreshold = 5
                        },
                        new
                        {
                            Id = 5L,
                            LastStockChangeAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 5L,
                            QuantityAvailable = 50,
                            QuantityReserved = 0,
                            RowVersion = new byte[0],
                            SafetyStockThreshold = 5
                        },
                        new
                        {
                            Id = 6L,
                            LastStockChangeAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 6L,
                            QuantityAvailable = 50,
                            QuantityReserved = 0,
                            RowVersion = new byte[0],
                            SafetyStockThreshold = 5
                        },
                        new
                        {
                            Id = 7L,
                            LastStockChangeAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 7L,
                            QuantityAvailable = 50,
                            QuantityReserved = 0,
                            RowVersion = new byte[0],
                            SafetyStockThreshold = 5
                        },
                        new
                        {
                            Id = 8L,
                            LastStockChangeAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 8L,
                            QuantityAvailable = 50,
                            QuantityReserved = 0,
                            RowVersion = new byte[0],
                            SafetyStockThreshold = 5
                        },
                        new
                        {
                            Id = 9L,
                            LastStockChangeAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 9L,
                            QuantityAvailable = 50,
                            QuantityReserved = 0,
                            RowVersion = new byte[0],
                            SafetyStockThreshold = 5
                        },
                        new
                        {
                            Id = 10L,
                            LastStockChangeAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 10L,
                            QuantityAvailable = 50,
                            QuantityReserved = 0,
                            RowVersion = new byte[0],
                            SafetyStockThreshold = 5
                        },
                        new
                        {
                            Id = 11L,
                            LastStockChangeAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 11L,
                            QuantityAvailable = 50,
                            QuantityReserved = 0,
                            RowVersion = new byte[0],
                            SafetyStockThreshold = 5
                        },
                        new
                        {
                            Id = 12L,
                            LastStockChangeAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 12L,
                            QuantityAvailable = 50,
                            QuantityReserved = 0,
                            RowVersion = new byte[0],
                            SafetyStockThreshold = 5
                        },
                        new
                        {
                            Id = 13L,
                            LastStockChangeAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 13L,
                            QuantityAvailable = 50,
                            QuantityReserved = 0,
                            RowVersion = new byte[0],
                            SafetyStockThreshold = 5
                        },
                        new
                        {
                            Id = 14L,
                            LastStockChangeAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 14L,
                            QuantityAvailable = 50,
                            QuantityReserved = 0,
                            RowVersion = new byte[0],
                            SafetyStockThreshold = 5
                        },
                        new
                        {
                            Id = 15L,
                            LastStockChangeAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 15L,
                            QuantityAvailable = 50,
                            QuantityReserved = 0,
                            RowVersion = new byte[0],
                            SafetyStockThreshold = 5
                        },
                        new
                        {
                            Id = 16L,
                            LastStockChangeAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 16L,
                            QuantityAvailable = 50,
                            QuantityReserved = 0,
                            RowVersion = new byte[0],
                            SafetyStockThreshold = 5
                        },
                        new
                        {
                            Id = 17L,
                            LastStockChangeAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 17L,
                            QuantityAvailable = 50,
                            QuantityReserved = 0,
                            RowVersion = new byte[0],
                            SafetyStockThreshold = 5
                        },
                        new
                        {
                            Id = 18L,
                            LastStockChangeAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 18L,
                            QuantityAvailable = 50,
                            QuantityReserved = 0,
                            RowVersion = new byte[0],
                            SafetyStockThreshold = 5
                        },
                        new
                        {
                            Id = 19L,
                            LastStockChangeAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 19L,
                            QuantityAvailable = 50,
                            QuantityReserved = 0,
                            RowVersion = new byte[0],
                            SafetyStockThreshold = 5
                        },
                        new
                        {
                            Id = 20L,
                            LastStockChangeAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 20L,
                            QuantityAvailable = 50,
                            QuantityReserved = 0,
                            RowVersion = new byte[0],
                            SafetyStockThreshold = 5
                        });
                });

            modelBuilder.Entity("FinalGraduationProject.Models.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FinalGraduationProject.Models.OrderItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("FinalGraduationProject.Models.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("FinalGraduationProject.Models.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name", "Size", "Color");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BrandId = 1L,
                            CategoryId = 1L,
                            Color = "Black",
                            Description = "Running shoes",
                            Gender = "Men",
                            ImageUrl = "/images/nike_airzoom.jpg",
                            IsActive = true,
                            Name = "Nike Air Zoom",
                            Price = 120m,
                            Size = 42
                        },
                        new
                        {
                            Id = 2L,
                            BrandId = 1L,
                            CategoryId = 1L,
                            Color = "Blue",
                            Description = "Lightweight running shoes",
                            Gender = "Women",
                            ImageUrl = "/images/nike_revolution.jpg",
                            IsActive = true,
                            Name = "Nike Revolution",
                            Price = 90m,
                            Size = 38
                        },
                        new
                        {
                            Id = 3L,
                            BrandId = 2L,
                            CategoryId = 1L,
                            Color = "White",
                            Description = "High comfort running shoes",
                            Gender = "Men",
                            ImageUrl = "/images/adidas_ultraboost.jpg",
                            IsActive = true,
                            Name = "Adidas Ultraboost",
                            Price = 150m,
                            Size = 43
                        },
                        new
                        {
                            Id = 4L,
                            BrandId = 2L,
                            CategoryId = 2L,
                            Color = "Green",
                            Description = "Classic casual shoes",
                            Gender = "Unisex",
                            ImageUrl = "/images/adidas_stansmith.jpg",
                            IsActive = true,
                            Name = "Adidas Stan Smith",
                            Price = 100m,
                            Size = 41
                        },
                        new
                        {
                            Id = 5L,
                            BrandId = 3L,
                            CategoryId = 2L,
                            Color = "Pink",
                            Description = "Casual sneakers",
                            Gender = "Women",
                            ImageUrl = "/images/puma_smash.jpg",
                            IsActive = true,
                            Name = "Puma Smash",
                            Price = 85m,
                            Size = 39
                        },
                        new
                        {
                            Id = 6L,
                            BrandId = 1L,
                            CategoryId = 1L,
                            Color = "Grey",
                            Description = "Versatile running shoes",
                            Gender = "Men",
                            ImageUrl = "/images/nike_pegasus.jpg",
                            IsActive = true,
                            Name = "Nike Pegasus",
                            Price = 130m,
                            Size = 44
                        },
                        new
                        {
                            Id = 7L,
                            BrandId = 2L,
                            CategoryId = 2L,
                            Color = "Red",
                            Description = "Retro casual shoes",
                            Gender = "Unisex",
                            ImageUrl = "/images/adidas_gazelle.jpg",
                            IsActive = true,
                            Name = "Adidas Gazelle",
                            Price = 95m,
                            Size = 40
                        },
                        new
                        {
                            Id = 8L,
                            BrandId = 3L,
                            CategoryId = 3L,
                            Color = "Blue/White",
                            Description = "Sporty sneakers",
                            Gender = "Men",
                            ImageUrl = "/images/puma_future.jpg",
                            IsActive = true,
                            Name = "Puma Future Rider",
                            Price = 110m,
                            Size = 42
                        },
                        new
                        {
                            Id = 9L,
                            BrandId = 1L,
                            CategoryId = 2L,
                            Color = "White/Black",
                            Description = "Casual lifestyle shoes",
                            Gender = "Men",
                            ImageUrl = "/images/nike_courtvision.jpg",
                            IsActive = true,
                            Name = "Nike Court Vision",
                            Price = 105m,
                            Size = 43
                        },
                        new
                        {
                            Id = 10L,
                            BrandId = 2L,
                            CategoryId = 2L,
                            Color = "White/Gold",
                            Description = "Street style classic",
                            Gender = "Women",
                            ImageUrl = "/images/adidas_superstar.jpg",
                            IsActive = true,
                            Name = "Adidas Superstar",
                            Price = 110m,
                            Size = 37
                        },
                        new
                        {
                            Id = 11L,
                            BrandId = 3L,
                            CategoryId = 3L,
                            Color = "Black/Orange",
                            Description = "Chunky sneakers",
                            Gender = "Unisex",
                            ImageUrl = "/images/puma_rsx.jpg",
                            IsActive = true,
                            Name = "Puma RS-X",
                            Price = 125m,
                            Size = 42
                        },
                        new
                        {
                            Id = 12L,
                            BrandId = 1L,
                            CategoryId = 3L,
                            Color = "Pink/White",
                            Description = "Sporty lifestyle shoes",
                            Gender = "Women",
                            ImageUrl = "/images/nike_airmax.jpg",
                            IsActive = true,
                            Name = "Nike Air Max",
                            Price = 140m,
                            Size = 39
                        },
                        new
                        {
                            Id = 13L,
                            BrandId = 2L,
                            CategoryId = 3L,
                            Color = "Black",
                            Description = "Trendy sports shoes",
                            Gender = "Men",
                            ImageUrl = "/images/adidas_nmd.jpg",
                            IsActive = true,
                            Name = "Adidas NMD",
                            Price = 160m,
                            Size = 44
                        },
                        new
                        {
                            Id = 14L,
                            BrandId = 3L,
                            CategoryId = 2L,
                            Color = "White",
                            Description = "Casual sneakers",
                            Gender = "Women",
                            ImageUrl = "/images/puma_cali.jpg",
                            IsActive = true,
                            Name = "Puma Cali",
                            Price = 90m,
                            Size = 38
                        },
                        new
                        {
                            Id = 15L,
                            BrandId = 1L,
                            CategoryId = 1L,
                            Color = "Grey",
                            Description = "Budget running shoes",
                            Gender = "Men",
                            ImageUrl = "/images/nike_downshifter.jpg",
                            IsActive = true,
                            Name = "Nike Downshifter",
                            Price = 75m,
                            Size = 42
                        },
                        new
                        {
                            Id = 16L,
                            BrandId = 2L,
                            CategoryId = 3L,
                            Color = "Blue",
                            Description = "Sporty sneakers",
                            Gender = "Unisex",
                            ImageUrl = "/images/adidas_zxflux.jpg",
                            IsActive = true,
                            Name = "Adidas ZX Flux",
                            Price = 115m,
                            Size = 41
                        },
                        new
                        {
                            Id = 17L,
                            BrandId = 3L,
                            CategoryId = 1L,
                            Color = "Black/Red",
                            Description = "Performance running shoes",
                            Gender = "Men",
                            ImageUrl = "/images/puma_ignite.jpg",
                            IsActive = true,
                            Name = "Puma Ignite",
                            Price = 135m,
                            Size = 43
                        },
                        new
                        {
                            Id = 18L,
                            BrandId = 1L,
                            CategoryId = 2L,
                            Color = "White",
                            Description = "Classic sneakers",
                            Gender = "Unisex",
                            ImageUrl = "/images/nike_blazer.jpg",
                            IsActive = true,
                            Name = "Nike Blazer",
                            Price = 95m,
                            Size = 42
                        },
                        new
                        {
                            Id = 19L,
                            BrandId = 2L,
                            CategoryId = 3L,
                            Color = "Brown",
                            Description = "Outdoor trail shoes",
                            Gender = "Men",
                            ImageUrl = "/images/adidas_terrex.jpg",
                            IsActive = true,
                            Name = "Adidas Terrex",
                            Price = 170m,
                            Size = 45
                        },
                        new
                        {
                            Id = 20L,
                            BrandId = 3L,
                            CategoryId = 3L,
                            Color = "Purple",
                            Description = "Training shoes",
                            Gender = "Women",
                            ImageUrl = "/images/puma_enzo.jpg",
                            IsActive = true,
                            Name = "Puma Enzo",
                            Price = 100m,
                            Size = 38
                        });
                });

            modelBuilder.Entity("FinalGraduationProject.Models.Shipment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ShippedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("ShippingMethodId")
                        .HasColumnType("bigint");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ShippingMethodId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("FinalGraduationProject.Models.ShippingMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Cost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("EstimatedDays")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ShippingMethods");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FinalGraduationProject.Models.Address", b =>
                {
                    b.HasOne("FinalGraduationProject.Models.ApplicationUser", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinalGraduationProject.Models.Cart", b =>
                {
                    b.HasOne("FinalGraduationProject.Models.ApplicationUser", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinalGraduationProject.Models.CartItem", b =>
                {
                    b.HasOne("FinalGraduationProject.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalGraduationProject.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FinalGraduationProject.Models.Inventory", b =>
                {
                    b.HasOne("FinalGraduationProject.Models.Product", "Product")
                        .WithOne("Inventory")
                        .HasForeignKey("FinalGraduationProject.Models.Inventory", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FinalGraduationProject.Models.Order", b =>
                {
                    b.HasOne("FinalGraduationProject.Models.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinalGraduationProject.Models.OrderItem", b =>
                {
                    b.HasOne("FinalGraduationProject.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalGraduationProject.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FinalGraduationProject.Models.Payment", b =>
                {
                    b.HasOne("FinalGraduationProject.Models.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FinalGraduationProject.Models.Product", b =>
                {
                    b.HasOne("FinalGraduationProject.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalGraduationProject.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FinalGraduationProject.Models.Shipment", b =>
                {
                    b.HasOne("FinalGraduationProject.Models.Order", "Order")
                        .WithMany("Shipments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalGraduationProject.Models.ShippingMethod", "ShippingMethod")
                        .WithMany("Shipments")
                        .HasForeignKey("ShippingMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ShippingMethod");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("FinalGraduationProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("FinalGraduationProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalGraduationProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("FinalGraduationProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinalGraduationProject.Models.ApplicationUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Carts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FinalGraduationProject.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FinalGraduationProject.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("FinalGraduationProject.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FinalGraduationProject.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payments");

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("FinalGraduationProject.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Inventory");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("FinalGraduationProject.Models.ShippingMethod", b =>
                {
                    b.Navigation("Shipments");
                });
#pragma warning restore 612, 618
        }
    }
}
